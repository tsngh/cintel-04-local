[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom shiny import render\nimport seaborn as sns\nfrom shiny import reactive\nfrom palmerpenguins import load_penguins\n\n# Load the penguins dataset\npenguins_df = load_penguins()\n\nui.page_opts(title=\"Tesheena's Palmer Penguins\", fillable=True)\n\nwith ui.sidebar(position=\"right\", open=\"open\"):\n    ui.h2(\"Sidebar\")\n    \n    ui.input_selectize(\n        \"selected_attributes\",\n        \"Penguin's Attributes\", \n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n    \n    ui.input_numeric(\"plotly_bin_count\", \"Number of Plotly Bins\", 10, min=1, max=15)\n\n    ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn Bins\", 5, 25, 15)\n\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Penguin Species\",\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=False,\n    )\n    ui.hr()\n\n    ui.a(\"GitHub\", href=\"https://github.com/tsngh/cintel-02-data\", target=\"_blank\")\n\nwith ui.card():\n    ui.card_header(\"Table View\")\n    @render.data_frame\n    def data_table():\n        return render.DataTable(penguins_df, filters=False,selection_mode='row')\n\nwith ui.card():\n    ui.card_header(\"Grid View\")\n    @render.data_frame\n    def data_grid():\n        return render.DataGrid(penguins_df, filters=False, selection_mode=\"row\")\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Plotly Histogram of Penguins\")\n        @render_plotly\n        def histogram_plotly():\n            filtered_df = penguins_df[penguins_df['species'].isin(input.selected_species_list())]\n            return px.histogram(\n                data_frame=filtered_df,\n                x=input.selected_attributes(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            )\n\n    with ui.card():\n        ui.card_header(\"Seaborn Histogram of Penguins\")\n        @render.plot\n        def histogram_seaborn():\n            filtered_df = penguins_df[penguins_df['species'].isin(input.selected_species_list())]\n            return sns.histplot(\n                data=filtered_df,\n                x=input.selected_attributes(),\n                bins=input.seaborn_bin_count(),\n                hue=\"species\",\n            )\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot: Species\")\n    @render_plotly\n    def plotly_scatterplot():\n        filtered_df = penguins_df[penguins_df['species'].isin(input.selected_species_list())]\n        return px.scatter(\n            filtered_df,\n            x=\"body_mass_g\",\n            y=input.selected_attributes(),\n            color=\"species\",\n            labels={\n                \"body_mass_g\": \"Body Mass (g)\",\n                input.selected_attributes(): f\"{input.selected_attributes().replace('_', ' ').title()} (mm)\"\n            }\n        )\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    return penguins_df[penguins_df[\"species\"].isin(selected_species)]\n", "type": "text"}]